/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as MinaeFerntest3ImdbApi from "../../..";
export declare namespace Movie {
    interface Options {
        environment?: core.Supplier<environments.MinaeFerntest3ImdbApiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Movie {
    protected readonly _options: Movie.Options;
    constructor(_options?: Movie.Options);
    /**
     * Add a movie to the database
     *
     * @example
     *     await minaeFerntest3ImdbApi.movie.create({
     *         title: "The Shawshank Redemption",
     *         rating: 9.3
     *     })
     */
    create(request: MinaeFerntest3ImdbApi.CreateMovieRequest, requestOptions?: Movie.RequestOptions): Promise<MinaeFerntest3ImdbApi.MovieId>;
    /**
     * Retrieve a movie from the database based on the ID
     * @throws {@link MinaeFerntest3ImdbApi.MovieDoesNotExistError}
     *
     * @example
     *     await minaeFerntest3ImdbApi.movie.get("tt9398640")
     *
     * @example
     *     await minaeFerntest3ImdbApi.movie.get("tt1234")
     */
    get(id: MinaeFerntest3ImdbApi.MovieId, requestOptions?: Movie.RequestOptions): Promise<MinaeFerntest3ImdbApi.Movie>;
    /**
     * @throws {@link MinaeFerntest3ImdbApi.MovieDoesNotExistError}
     *
     * @example
     *     await minaeFerntest3ImdbApi.movie.delete("tt2294629")
     */
    delete(id: MinaeFerntest3ImdbApi.MovieId, requestOptions?: Movie.RequestOptions): Promise<void>;
    /**
     * @throws {@link MinaeFerntest3ImdbApi.MovieDoesNotExistError}
     *
     * @example
     *     await minaeFerntest3ImdbApi.movie.update("tt2294629", {
     *         year: "2019"
     *     })
     */
    update(id: MinaeFerntest3ImdbApi.MovieId, request: MinaeFerntest3ImdbApi.UpdateMovieRequest, requestOptions?: Movie.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
